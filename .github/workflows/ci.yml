name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write # required to use OIDC authentication
  contents: write # to push tags and commits

jobs:
  CI:
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, macos-latest]
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::320450105600:role/GitHubActionRole
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: us-east-2 # use your region here.

      - name: CodeArtifact login
        run: aws codeartifact login --tool npm --repository ui --domain sundae --domain-owner 320450105600

      - name: Git Identity
        run: |
          git config --global user.name '🤖🍦'
          git config --global user.email '🤖🍦@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lerna bootstrap
        run: yarn bootstrap

      - name: Lint
        run: yarn lint

      - name: Type Check
        run: yarn typecheck

      - name: Test
        run: yarn test

      # - name: Set Current Version
      #   run: |
      #     CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
      #     echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      # - name: Tag Check
      #   id: tag_check
      #   run: |
      #     GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
      #     http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
      #       -H "Authorization: token ${GITHUB_TOKEN}")
      #     if [ "$http_status_code" -ne "404" ] ; then
      #       echo "::set-output name=exists_tag::true"
      #     else
      #       echo "::set-output name=exists_tag::false"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump versions and publish packages
        # if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          yarn version:ci
          yarn publish:ci
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
